// Copyright (c) 2020, 2025, Oracle and/or its affiliates.
//
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	ndbcontrollerv1 "github.com/mysql/ndb-operator/pkg/apis/ndbcontroller/v1"
	scheme "github.com/mysql/ndb-operator/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// NdbClustersGetter has a method to return a NdbClusterInterface.
// A group's client should implement this interface.
type NdbClustersGetter interface {
	NdbClusters(namespace string) NdbClusterInterface
}

// NdbClusterInterface has methods to work with NdbCluster resources.
type NdbClusterInterface interface {
	Create(ctx context.Context, ndbCluster *ndbcontrollerv1.NdbCluster, opts metav1.CreateOptions) (*ndbcontrollerv1.NdbCluster, error)
	Update(ctx context.Context, ndbCluster *ndbcontrollerv1.NdbCluster, opts metav1.UpdateOptions) (*ndbcontrollerv1.NdbCluster, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, ndbCluster *ndbcontrollerv1.NdbCluster, opts metav1.UpdateOptions) (*ndbcontrollerv1.NdbCluster, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*ndbcontrollerv1.NdbCluster, error)
	List(ctx context.Context, opts metav1.ListOptions) (*ndbcontrollerv1.NdbClusterList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *ndbcontrollerv1.NdbCluster, err error)
	NdbClusterExpansion
}

// ndbClusters implements NdbClusterInterface
type ndbClusters struct {
	*gentype.ClientWithList[*ndbcontrollerv1.NdbCluster, *ndbcontrollerv1.NdbClusterList]
}

// newNdbClusters returns a NdbClusters
func newNdbClusters(c *MysqlV1Client, namespace string) *ndbClusters {
	return &ndbClusters{
		gentype.NewClientWithList[*ndbcontrollerv1.NdbCluster, *ndbcontrollerv1.NdbClusterList](
			"ndbclusters",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *ndbcontrollerv1.NdbCluster { return &ndbcontrollerv1.NdbCluster{} },
			func() *ndbcontrollerv1.NdbClusterList { return &ndbcontrollerv1.NdbClusterList{} },
		),
	}
}
